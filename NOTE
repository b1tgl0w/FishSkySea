//Move the "Left off on" portion of this document to CurrentToDo,
//and don't duplicate it in multiple documents
//Leaving this entry here for now because not sure if it's complete
Left off on fixing bugs

!!IMPORTANT:Renderer::loadImage(overloaded). Big performance improvement if
check image has been added to images map before loading it

When done: Make sure SeaSnail::RETREAT_PROBABILITY is  (SCREEN_WIDTH / 2) / 
VELOCITY. Also see SeaSnail::MINIMUM_TIME_TO_RETREAT()

MainGameScene: MAKE SURE SCENE IS IN A VALID STATE WHEN ENTERED(...) INTO 
SECOND+ TIME.

Don't forget about sound effects

BUG: Shark never leaves the glow state. (Maybe fixed)

BUG: Sometimes fish doesn't glow after touching snail. (maybe fixed?)

Bug:    All images have "synchronized" glowing. This is okay in this game,
but not if multiple images are glowing at the same time.

Organize this list?

GlowRectangle is useless.

Bug: GlowAlpha value is per image, not per object

GraphicEffect:  Try to find another way than a deep copy. If not, make sure
to always pass const &, but even so, try to avoid a deep copy. Also GlowRectangle

BUG: All images are manipulated. Instead, some should only be loaded and not
scaled.

When Done:  Make a list of general things you can improve, such as making sure
public methods should be public.

Test glow on laptop. It looked fine on desktop, but when used laptop, there
were black dots throughout the sloogie image. Maybe fixed but still needs 
testing.

Fish should be sized according to their weight.

Layout subsystem needs to be tested more thoroughly.

Convert images with magenta to something similar, as magenta is used as the
color key for glowing images.

//Look up double dispatch:
Passing container of "collidable" (working name) objects to the
swim function of sea creatures. If
collidable.isCollision, return the object that is collided with.
What was it that wikipedia said about double dispatch in C++?

Valgrind and gprof Experiment/SdlClipShape.cpp (glowing images)

Make sure there are no translucent pixels on any of the graphics except
outside the outlinE

Image glowing algorithm is slow on big images //Fixed

Look up: shared_ptrs with SDL

IMPORTANT:  Scaling might cut off last pixel. Fix!

IMPORTANT:  In flipImage and scaleImage, do not call std::swap because you 
should not make library calls to a locked surface! Fix this.

IMPORTANT:  When shark moves, it should collide with fish but doesn't. Fix.
(See Shark::Attack/PatrolState::collidesWithFish)

IMPORTANT:  Fish::freeState and Fish::hookedState are created on the stack,
and then stored! Fix this! (Same with lineState

IMPORTANT:  MasterInputPublisher::, MasterClockPublisher::, and KeyboardPublisher::
unsubscribe does not unsubscribe.

IMPORTANT: Check into for loops with iterators to empty containers

IMPORTANT: Add faceRandomDirection() to Shark::initialize(...) after you have
debugged visionBox

IMPORTANT:  Should shark aboutFace same distance traveled or same time passed?
(i.e. in attackState it's moving faster)

IMPORTANT: Any classes with nested Stated classes must call an initializeState
method immediately _AFTER_ the ctors, and copy assign. Copy assign occurs
when passed by val...

IMPORTANT: Shouldn't copy ctors and assignment operators copy all member
objects?

IMPORTANT: Make sure Renderer:makeKey makes the same key for sizes that vary
slightly i.e. 30.5, 30.7. Make sure RendererElements get the correct key too.

IMPORTANT: LayeredLayout (and possibly coordinateLayout), drawWhenReady(list)
just sets toDraw = list when maybe it should toDraw.push_back(list[*])

//Found out online that I can use enable_shared_from_this, add a custom deleter
// that doesn't delete, and use a weak_ptr that points to the aforementioned
// shared ptr. Test this in Sandbox/StoringThisPointer*
Important: Collidable derivatives shouldn't pass this pointer as parameter
to collidesWith(...) because it might be stored in the other class and will
go out of scope. What to do?

Important: With FishStates, the have an Fish *owner variables that is passed
in as the this pointer. Make these shared_this_ptrs?

Important: Follow bill harlans guide to managing objects. Checklist:
ctors, initialize(...), protected default ctors, all data
members initialized in init(...), virtual destructors, dispose(...),
copy ctors, and copy assignment opers in all classes.

Important:  Copy assignment fails on Fish and Line if shared pointers
could not be obtained. Check into that.

Important: For child classes.initialize() call super::initialze()

Important:  Class line expects the renderer to free its SDL_Surface.
Is this a good idea? Check into it.

Important: Decided to have Renderer::flipImage(Flip how) rather than 
Renderer::transform(Transformation type).

Important:  If renderer frees an image at a given key, how do I ensure that
all transformations are freed?

Important:  Call srand somewhere

Important:  Make sure no boost::shared_ptrs don't leak by creating temporary
shared_ptrs as parameters

Important:  Can shared_from_this() be a parameter or do you need to make a temp?

Important:  Images can scale by small sizes, .1. Fix!

Important:  What happens if the renderer prunes a scaledImage, and then next
frame that scaled image returns to the screen without calling 
Renderer::manipulateImage?

Important:  If you pass a const shared_ptr, and set a member shared_ptr equal
to the param, will the reference count of the const shared_ptr be incremented?

The behavior of an offscreen fish is that it should face toward the screen

The behavior of a respawned fish is that it should swim in from the side.
Random side.

The behavior of Fish::aboutFace should make fish turn "in place". (I.e. turn
on the center of mass)

The behavior of the line pulling the fish should be:
1. If the pole is not extending or contracting, do not pull the fish //Delete
2. If the pole is extending/contracting, pull the fish if the abs(slope) > X
3. If the pole is reeling in, pull the fish upward at a slower than normal rate
The apparent behavior of the atari Fishing Derby is:
1. The fish is automatically reeled in, slowly, without pressin a button
2. The fish moves randomly, left or right, but will not get too far from the
pole point, how far depends on the closeness to the surface
3. Extending/contracting the pole will move the fish if the hook point gets
too far from the pole point.

The behavior of the layering of the line in relation to the fish and shark
should be changed so that the line appears on top of the fish and shark.

The behavior of a line after it catches a fish is that it should reset to its
default position.

The behavior of the title screen menu is that the selected option should glow

Currently the owner of GridLayout owns the cells too. However, if the
GridLayout itself modified the REs given to it, then those would be bypassed
because the cells would not give RE's to the containing grid. If possible,
change this.

Be careful not to misuse the screen layout classes. Try to ensure they keep
images proportional. For instance, don't use a coordinate layout class within
a border layout and use negative coordinates, which would cause the image
to leave the cell of the border layout. (Perhaps use clipping in this situation)

Allow program close with ctrl+c

When scaling large images, use the proxy pattern to draw old-sized image until
there are no other images being scaled at the moment.

Can the scaling algorithm be improved (efficiency) by using SDL_FillRect?

Use SDL_MustLock when Locking surfaces for transformations

Create the scene manager after you have all the scenes to work with. Else you
can't check if it works properly.

The mouth of the fish graphic should protrude more. The mouth position and
fish size should be updated to reflect any changes to the graphic. (The graphic
has been changed at least once without the code being updated).

The quadratic pole should have gaps filled with lines, not filled rects.

Create a scene manager interface that the titleScreen and gameScreen classes
will inherit from.

collidesWithOceanEdge should be updated to use the updated isOutside method.
With this method, you know which side(s) the object went outside of.

The reason the fish is still hooked after being eaten by the shark is that 
HookedState::swim isn't finished executing before respawing. The call to respawn
actually occurs while inside the HookedState::swim loop

Refactor Ocean to have vector<ptr<SeaCreature> > rather then vector<ptr<Fish>>

Refactor Fish so that it stores a boost::shared_ptr<Dimension> size instead of
classwide constant?

The size of the hook and fish mouth should probably be 3x3, not 4x4

When fish is hooked, shouldn't be able to line.giveLine()

Consider adding a shark mode, where you fish for sharks and have a big hook

Implement default keys for player 2

Refactor PlayerKeyTranslater with a boost::bimap

Consider calling public method from collision methods. See
Shark::seeFish(...) and Shark::PatrolState::collidesWithFish(...)

Does fish move backward one frame right after changing direction? Add a cancel
or update draw(...) to renderer?

SdlFlipImage:   Should the lock/unlock occur outside of the loops?

When the fish moves, it should check for collisions with the line. But the
opposite is also true. Make sure that the line checks for collisions with
the fish when it moves.

Line.cpp:   Add ctors, copy assign, dtor, initialize(...), and dispose(...)

When adding BoundingBoxes to Shark, Fish, and Ocean, you must also
add Points and Dimensions to be shared by the BoundingBoxes. You must
also update the points when the object moves. This can be tricky because,
for instance, a fish has a position and a mouth position.

Note:   When fish about faces, the mouthBox will need to flip.

What should I do about Fish containing size constants and BoundingBox
needing shared_ptrs?

Eliminate code duplication in copy ctors and assignment operators.

Add FishState derivitives copy and assign ctors

Make Fish.line1 and Fish.line2 boost::shared_array

GridLayout unmerge?

BUG: When the fish is first hooked, it will "teleport" a variable small
distance. This is because the collision between hook and mouth might not
be at point (0,0) of the two bounding boxes. To fix the issue, store
the offset of the two points when a collision first occurs. Then when you
set the mouth position of the fish when the line pulls, adjust the position
by the stored offset.

BUG: Hook point can go above pole point

BUG: Using a layered layout causes image to flicker

BUG: Layered layout draws in reverse order (or Renderer). Update: it seems that
the layer becomes a large negative number

BUG: Scaling an image to a size smaller than the original inconsistently
erases lines as it gets smaller and smaller. i.e. at 3% the outline will be
shown, 2% the outline will not be shown, and 1% it will show again.

BUG: Line jitters when moved against edge of screen. This bug was introduced
when lines started to be drawn directly to screen. So look in relevant code.

BUG: ScaleClipFit, images that are above and to the left of the clip area that
are delta bigger than the fit area are still scaled. Is this undesirable?

Bug: ScaleClipFit and FillClipFit don't work right.

Bug: Clipping, stretching, or BorderLayout sizing clip/size inconsistently
with other borders. For instance, when using sharkplaceholder images with 
full screen BorderLayout (fillClipFit), the outline of the sharkplaceholder
isn't present on the left image, and is thinner on the bottom image.

TEST: 3 LayeredLayout of 2 LayeredLayouts of CoordinateLayouts

Check if should pass boost::shared_ptr<T> or const boost::shared_ptr<T> &

Check if boost::weak_ptr<T> can be reassigned

POLE: If the hook is far to the right of the tip of the pole, I want the pole
to be relatively straight. As the hook gets closer to the tip of the pole
(in x direction), I want the pole to get curvier. The maximum curviness is 
when hook.x <= pole.x. See if this looks natural.

Small fish scaled down?

Fish weight use similar algorithm as Brick Basher?

DO A CODE WALKTHROUGH WHEN DONE WITH GAME OR AT GOOD POINT

Open question:  In Renderer.cpp, should init call images.clear() and
toDraw.clear()? Should this be the job of dispose(...)? If images was cleared
in init(...), some SDL_Surface * would not be freed, if images was
not empty. I'm thinking it's the job of dispose(...) but not sure.

//No, loadImage checks if map already has an image, and if so,
// calls SDL_FreeSurface and erases the map entry
Make a renderer.deleteImage() or have loadImage check for image?

IF POSTING ON FORUM: Mention maintainance problem when putting
calculateElapsedTime() outside of class. Public method signatures of Line::move()
had to change, even though it was private move(...) that needed information.

/****************************COMPLETED ITEMS*******************************/

//Probably done. Needs testing.
SVN Log Rev 27:
- In Line.cpp: There's a bug if state is on, then off, then on. The lastTicks
doesn't get updated. Tried several fixes. Updated currentTicks when the state
was turned on from off. But this wouldn't work if state was changed on off on
in one frame. Tried calling calculateElapsed time in move(...) even if the state
wasn't on. But this wouldn't work if move wasn't called each frame. Thinking
about calculating elapsed time outside of class Line. The problem with this
is that if line state is turned on just before new current ticks is calculated,
it will still use the elapsed time calculated for the ENTIRE frame. Thus a player
could hit a key to move the line and it would "jump" a little bit the first frame.

//Done: Test that text surfaces get pruned when not used one frame. Test that
memory doesn't keep increasing.

DONE Make .h files .hpp, update #include directives, and update repository, using
svn mv instead of mv.
//Done
Important:  Add copy ctor and copy assign to SharkStates and FishStates.

//Done: Fixed by moving Fish::moveForward to beginning of loop. If for some reason
//you need to move it back...
Important:  Bug: Fish can sometimes get outside of the ocean if they turn around
twice when outside

//Done
Fish will turn around when tail is outside of boundries. Make it nose.

//Done
Make BoundingBox::isOutside(...)

//Done but memory footprint not analyzed.
//flipInPlace is more than twice as fast as a flip with a temporary surface
//flipInPlace with the locking of surface outside loop is .02ms faster than 
//flipInPlace with locking inside the loop
SdlFlipImage:   Profile for speed images flipped in place versus images
flipped in temporary surface. Almost certain in place flip will be faster
because the loop requires fewer iterations, no temporary surface must be
constructed, and there is one less lock/unlock to deal with. Memory footprint
is also probably smaller.

//Done, although for it to be accurate, randomlyAboutFace(...) must be
//called every frame
Don't allow fish to turn around within N frames from turning around

//Done. Checked if video mode had been set before created new
// screen surface. Also did checks on SDL_Init
How to deal with Renderers copy ctor? Two screen surfaces? Two
pointers that point to the screen? Disallow copy ctor? Disallow
more that one renderer object? Potential solution:  check if
video mode has been set, if so don't set video mode. If not set, don't
freesurface screen.

//Done. Added static int numberOfInstances to determine when last
//renderer is destructed.
How will renderer know when it is safe to call SDL_Quit and IMG_Quit?

//Done but ensure this is still the case when project finished
Effective C++ Item 4 for static non-local objects of different translation
units.

//DONE NOTE: DIFF CHECK LINE.CPP VERSION 24 and 25 //DONE (they're okay)

//FIXED BUG: When polePoint is near topleft of screen, line is dotted //FIXED

//Decided on protected init(), init() from ctors, dispose() then init()
// in other places within class. And public reinit only if necessary.
Note: Bill Harlan only calls initialize and super ctor from ctors. But
his initialize appears to create a memory leak if called twice. Figure out
how you want to do it.

//Decided on boost::weak_ptr
Shared Objects: In, for instance, your Fish class, it should contain a member
Ocean object, and the ocean object should contain multiple member fish objects.
I don't want copies of the objects, but rather pointers allowing "shared
ownership." Since there are cyclic dependancies, can't use boost:shared_ptr.
Here are the options I've considered so far:
1. boost::weak_ptr and when the member objects are used, check to see if they
still exist
2. Normal pointers that are set to 0 when deleted. When the objects are used,
check to see if they still exist (== 0)
3. Pass in references as arguments to the functions they're needed in.

//Done
Make WindowSetup a link to Writing\ and\ Text/Computer\ Knowledge?

//Done
BUG: The line is tight when the fish is near both the surface and edge. This
causes the fish to spastically turn back and forth.

//Done
BUG: When reeling in on the right (and possibly left) edge, the fish gets
stuck and won't move off. Possible fix: look into checking collisions after
pulling/being pulled by the line. Another thing to consider is is the fish
being forced to align with the ocean edge. Another consideration: is the fish
moving out of the ocean before checking collisions, and thus moving fruitlessly
before being forced back into the ocean?

//Done
BUG: Regarding Line::isTight, suppose the fish is to far right but is
facing left. Then it will aboutFace() and go even FARTHER right, which is not
the desired behavior. To fix, consider returning a direction, rather than a
bool.

//Done
BUG: Fish coming in from right side come in slower than those from left.

//Done
BUG: Fish can get caught on edge


